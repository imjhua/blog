// you can write to stdout for debugging purposes, e.g.
// console.log('this is a debug message');

function solution(A, B) {
    // write your code in JavaScript (Node.js 8.9.4)

if(0<=A && A<=100000000 && 0<=B && B<=100000000){

let res = A * B;
let binary = res.toString(2);

let count = 0;
binary.split('').map((v, i)=>{

if(v==='1') count++;

}); 
return count;
}
}


///



// you can write to stdout for debugging purposes, e.g.
// console.log('this is a debug message');

function solution(S) {
    // write your code in JavaScript (Node.js 8.9.4)

let v = parseInt(S, 2);

let count = x(v, 0);

return count;
}


function x(v, count){
if(v<=0){
return count;
}
let newV = v%2?v-1:v/2;

return x(newV, count+1);
}


///


// you can write to stdout for debugging purposes, e.g.
// console.log('this is a debug message');

function solution(A) {
    // write your code in JavaScript (Node.js 8.9.4)

const obj = class {
constructor(index){
this.index=index;
}
value(){
return A[this.index];
}
}

const s = {
0:new obj(0),
1:new obj(1),
length:2
};

//console.log(Array.isArray(s))
// console.log(s)
// console.log(s.length)
// console.log(s[1].value() === A[1])
// console.log(!s[1].hasOwnProperty('value'))
return s;




}


///


// you can write to stdout for debugging purposes, e.g.
// console.log('this is a debug message');

function solution(A) {
    // write your code in JavaScript (Node.js 8.9.4)


const s = {
value(){
return this.x
}

}
const x = A.map((v,i)=>{
return {
 __proto__:s,
x:v
}
});

// console.log(x[0].value());

// console.log(!x[0].hasOwnProperty('value'))

return x;


/*
const obj = class {
constructor(index){
this.index=index;
}
value(){
return A[this.index];
}
}

const s = {
0:new obj(0),
1:new obj(1),
length:2
};

*/
//console.log(Array.isArray(s))
// console.log(s)
// console.log(s.length)
// console.log(s[1].value() === A[1])
// console.log(!s[1].hasOwnProperty('value'))
// return s;




}



---


// you can write to stdout for debugging purposes, e.g.
// console.log('this is a debug message');

const INSERT_VALUE = 5;

function solution(N) {
    // write your code in JavaScript (Node.js 8.9.4)

let result = [];

let Nstr = N.toString();
let arr = Nstr.split('');

/*
if(N<0){
let [_, ...x] = arr;
arr = x.map(v=>'-'+v);
}
*/

let isInsert = false;
arr.forEach((el, i)=>{
if(!isInsert){

if(N<0 && parseInt(el)>INSERT_VALUE){
result.push(INSERT_VALUE.toString());
isInsert = true;
} 

if(N>=0 && parseInt(el)<INSERT_VALUE){
result.push(INSERT_VALUE.toString());
isInsert = true;
} 
}

result.push(el);
});
if(!isInsert){
result.push(INSERT_VALUE.toString());
isInsert = true;
}


return parseInt(result.join(''));
}



---


const MULTIPLICATION_NUMBER = 17;
function solution(A) {
    // write your code in JavaScript (Node.js 8.9.4)

let numberValue = parseInt(A.reverse().join(''));
console.log(numberValue);

let multi = MULTIPLICATION_NUMBER * numberValue;
console.log(multi);


let reuslt = 0;
multi.toString().split('').map((v, i)=>{

reuslt=+v;

}); 
return result;
}
}


///

// you can write to stdout for debugging purposes, e.g.
// console.log('this is a debug message');

const START_STR = ['55', '56', '(55)', '(56)'];
const SEPARATOR = ' ';
const STR_LENGT = 2;

const isEvenLength = str => str.length % 2 === 0

function solution(S) {
    // write your code in JavaScript

for(let str of START_STR){
// check str
if(S.indexOf(str) === 0){
// check 

let [,data] = S.split(str);
let arr = data.split(SEPARATOR);

// remove start separator
arr.shift();

for(let a of arr){
// check even
if(!a || !isEvenLength(a)){
return false;
}
}

return true;


}
} 


    return false;
}


///


// you can write to stdout for debugging purposes, e.g.
// console.log('this is a debug message');

const X_MIN = 0;

const Y_MAX = Math.pow(2,1023);

function solution(S, T) {
    // write your code in JavaScript

let X = parseInt(S, 10);
let Y = parseInt(T, 10);


/*
let X_OPERAND = 1;
if(S.length>1){
console.log(Math.pow(10, (S.length-1) ))
let X_OPERAND = Math.pow(10, (S.length-1) );
X = X / X_OPERAND;
}


let Y_OPERAND = 1;
if(T.length>1){
console.log(Math.pow(10, (T.length-1) ))
let Y_OPERAND = Math.pow(10, (T.length-1) );
Y = Y / Y_OPERAND;
}
*/



if(X_MIN<=X && Y<=Y_MAX){

const data = Math.pow(X,Y).toString();
// console.log(data) // infinity

return parseInt(data[data.length-1], 10);


}

return 0;
}



////




const X_MIN = 1;

const Y_MIN = 0;
const Y_MAX = 9;

let A = 0;
let B = 0;
let C = 0;



function solution(X, Y) {
    // write your code in JavaScript


if(X_MIN<=X && (Y_MIN<=Y && Y<=Y_MAX)){

let arr = [];
for(let i=X_MIN; i <= X; i++){
if(i.toString().indexOf(Y) > -1){
A++;
B+=i;

// init C
if(C===0){
C=1;
}

C*=i;
}
}


}
    return [A,B,C];
}


///

// you can write to stdout for debugging purposes, e.g.
// console.log('this is a debug message');

const CODE = 'ABC DEFG HJK';



function solution(N, S) {
    // write your code in JavaScript (Node.js 8.9.4)

const checkReservedSeat = seatCode => S.indexOf(seatCode) > -1;
const availableSeatListArr = [];

CODE.split(' ').forEach(v=>{
let availableSeatList = v.split('').map((s, i)=>{
const seatCode = N+s;

return checkReservedSeat(seatCode) ? '':seatCode;

});

console.log(availableSeatList);
availableSeatListArr.push(availableSeatList);

});


let count = 0;
availableSeatListArr.forEach((v,i)=>{



});




count =2;

return count;
}
